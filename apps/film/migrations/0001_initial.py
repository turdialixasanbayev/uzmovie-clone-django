# Generated by Django 5.2.5 on 2025-09-12 16:37

import ckeditor.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('category', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', ckeditor.fields.RichTextField(blank=True, help_text='Write your review about the film', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The date and time when the review was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The date and time when the review was last updated')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='The official name of the country (e.g., Uzbekistan)', max_length=150, unique=True)),
                ('code', models.CharField(db_index=True, help_text='The ISO 3166-1 alpha-3 country code (e.g., UZB)', max_length=3, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The date and time when this country was added')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The date and time when this country was last updated')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='film_countr_name_360ccd_idx'), models.Index(fields=['code'], name='film_countr_code_03b22c_idx'), models.Index(fields=['created_at'], name='film_countr_created_e87513_idx'), models.Index(fields=['updated_at'], name='film_countr_updated_04c301_idx')],
            },
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='The official title of the film', max_length=350, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='Unique slug generated from the film name', max_length=450, null=True, unique=True)),
                ('image', models.ImageField(blank=True, help_text='Film poster or cover image', null=True, upload_to='films')),
                ('video', models.FileField(blank=True, help_text='Optional full video file', null=True, upload_to='videos')),
                ('description', ckeditor.fields.RichTextField(blank=True, help_text='Detailed description or synopsis of the film', null=True)),
                ('trailer_link', models.URLField(blank=True, db_index=True, help_text='YouTube or other video platform trailer URL', max_length=300, null=True, unique=True)),
                ('bot_link', models.URLField(blank=True, db_index=True, help_text='Telegram bot link to access the film', max_length=300, null=True)),
                ('bot_code', models.CharField(blank=True, db_index=True, help_text='Unique bot access code for the film', max_length=10, null=True, unique=True)),
                ('year', models.PositiveIntegerField(blank=True, db_index=True, help_text='The year the film was released', null=True)),
                ('language', models.CharField(choices=[('EN', 'English'), ('RU', 'Russian'), ('TR', 'Turkish'), ('UZ', 'Uzbek')], db_index=True, default='UZ', help_text='Main language of the film', max_length=2)),
                ('duration', models.DurationField(blank=True, db_index=True, help_text='Film duration in HH:MM:SS', null=True)),
                ('age_type', models.IntegerField(choices=[(0, '0+'), (6, '6+'), (12, '12+'), (16, '16+'), (18, '18+')], db_index=True, default=0, help_text='Minimum recommended viewer age')),
                ('views', models.PositiveIntegerField(db_index=True, default=0, help_text='Total number of views')),
                ('release_date', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The date and time when the film was added to the system')),
                ('p', models.IntegerField(choices=[(0, '240p'), (1, '360p'), (2, '480p'), (3, '720p'), (4, '1080p'), (5, '4K')], db_index=True, default=2, help_text='Video quality of the film')),
                ('category', models.ForeignKey(help_text='The category this film belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='films', to='category.category')),
                ('country', models.ForeignKey(help_text='Country where the film was produced', on_delete=django.db.models.deletion.CASCADE, related_name='film_country', to='film.country')),
                ('tags', models.ManyToManyField(blank=True, help_text='Tags associated with this film', related_name='film', to='category.tag')),
            ],
            options={
                'verbose_name': 'Film',
                'verbose_name_plural': 'Films',
                'ordering': ['-release_date'],
            },
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction', models.SmallIntegerField(choices=[(1, 'Like'), (-1, 'Dislike')], db_index=True, help_text="User's reaction to the film (like or dislike)")),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The date and time when the reaction was created')),
                ('film', models.ForeignKey(help_text='The film that the user reacted to', on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='film.film')),
            ],
            options={
                'verbose_name': 'Reaction',
                'verbose_name_plural': 'Reactions',
                'ordering': ['-created_at'],
            },
        ),
    ]
